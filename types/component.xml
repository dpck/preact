<types namespace="preact">

  <constructor name="Component" desc="A base class that is usually subclassed to create stateful _Preact_ components.">
    <arg type="!Object" name="props" opt>The initial component props.</arg>
    <arg type="!Object" name="context" opt>
      The initial context from parent components' getChildContext.
    </arg>

    <prop alias="__x" type="boolean" name="_disable" opt>
      Turns off stateful re-rendering.
    </prop>

    <prop static type="!Object" name="defaultProps" opt>
      Properties that will be assigned upon construction of the component.
    </prop>
    <fn static name="getDerivedStateFromProps" opt return="!Object">
      <arg name="props" type="!Object">Component properties.</arg>
      <arg name="state" type="!Object">Component plain state.</arg>
      The function to compute the state from properties.
    </fn>

    <prop type="!Object" name="context">The context.</prop>
    <prop type="!Object" name="props">The properties.</prop>
    <prop type="!Object" name="state">The state.</prop>

    <fn name="setState">
      <arg type="!Object" name="state">The state.</arg>
      <arg type="function(): void" name="callback" opt>
        The callback after completion.
      </arg>
    </fn>
    <fn name="forceUpdate">
      <arg type="function(): void" name="callback" opt>
        The callback after completion.
      </arg>
    </fn>
    <fn name="render" return="preact.VNode">
      <arg type="!Object" name="props" opt>
        Component properties.
      </arg>
      <arg type="!Object" name="state" opt>
        Component state.
      </arg>
      <arg type="!Object" name="context" opt>
        Component context.
      </arg>
      The `render()` function is required for all components. It can inspect the props and state of the component, and should return a _Preact_ element or `null`.
    </fn>
    <fn name="componentWillMount">
      Called before the component gets mounted to the DOM.
    </fn>
    <fn name="componentDidMount">
      Called after the component gets mounted to the DOM.
    </fn>
    <fn name="componentWillUnmount">
      Called prior to removal from the DOM.
    </fn>

    <fn name="getChildContext" return="!Object">
    </fn>

    <fn name="componentWillReceiveProps">
      <arg type="!Object" name="nextProps" opt>
        New properties.
      </arg>
      <arg type="!Object" name="nextContext" opt>
        New context.
      </arg>
      Called before new props get accepted.
    </fn>
    <fn name="shouldComponentUpdate" return="boolean">
      <arg type="!Object" name="nextProps" opt>
        New properties.
      </arg>
      <arg type="!Object" name="nextState" opt>
        New state.
      </arg>
      <arg type="!Object" name="nextContext" opt>
        New context.
      </arg>
      Called before `render()`. Should return `false` to skip render.
    </fn>
    <fn name="componentWillUpdate">
      <arg type="!Object" name="nextProps" opt>
        New properties.
      </arg>
      <arg type="!Object" name="nextState" opt>
        New state.
      </arg>
      <arg type="!Object" name="nextContext" opt>
        New context.
      </arg>
      Called before `render()`.
    </fn>
    <fn name="componentDidUpdate">
      <arg type="!Object" name="prevProps" opt>
        Previous properties.
      </arg>
      <arg type="!Object" name="prevState" opt>
        Previous state.
      </arg>
      <arg type="!Object" name="prevContext" opt>
        Previous context.
      </arg>
      Called after `render()`.
    </fn>

  </constructor>

</types>
